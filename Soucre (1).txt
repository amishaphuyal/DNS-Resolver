#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define T_A 1
#define T_NS 2
#define T_CNAME 5
#define T_SOA 6
#define T_PTR 12
#define T_MX 15

typedef struct {
    unsigned short id;

    unsigned char rd :1;
    unsigned char tc :1;
    unsigned char aa :1;
    unsigned char opcode :4;
    unsigned char qr :1;

    unsigned char rcode :4;
    unsigned char cd :1;
    unsigned char ad :1;
    unsigned char z :1;
    unsigned char ra :1;

    unsigned short q_count;
    unsigned short ans_count;
    unsigned short auth_count;
    unsigned short add_count;
} DNS_HEADER;

typedef struct {
    unsigned short qtype;
    unsigned short qclass;
} QUESTION;

#pragma pack(push, 1)
typedef struct {
    unsigned short type;
    unsigned short _class;
    unsigned int ttl;
    unsigned short data_len;
} R_DATA;
#pragma pack(pop)

typedef struct {
    unsigned char *name;
    R_DATA *resource;
    unsigned char *rdata;
} RES_RECORD;

typedef struct {
    unsigned char *name;
    QUESTION *ques;
} QUERY;

void ChangetoDnsNameFormat(unsigned char* dns,unsigned char* host) {
    int lock = 0 , i;
    strcat((char*)host,".");
    for(i = 0 ; i < (int)strlen((char*)host) ; i++) {
        if(host[i]=='.') {
            *dns++=i-lock;
            for(;lock<i;lock++) {
                *dns++=host[lock];
            }
            lock++;
        }
    }
    *dns++='\0';
}

unsigned char* ReadName(unsigned char* reader,unsigned char* buffer,int* count) {
    unsigned char *name;
    unsigned int p=0,jumped=0,offset;
    int i , j;

    *count = 1;
    name = (unsigned char*)malloc(256);
    name[0]='\0';

    while(*reader!=0) {
        if(*reader>=192) {
            offset = (*reader)*256 + *(reader+1) - 49152;
            reader = buffer + offset - 1;
            jumped = 1;
        } else {
            name[p++]=*reader;
        }
        reader=reader+1;
        if(jumped==0) *count = *count + 1;
    }
    name[p]='\0';
    if(jumped==1) *count = *count + 1;

    for(i=0;i<(int)strlen((const char*)name);i++) {
        p=name[i];
        for(j=0;j<(int)p;j++) {
            name[i]=name[i+1];
            i=i+1;
        }
        name[i]='.';
    }
    name[i-1]='\0';
    return name;
}

void ngethostbyname(unsigned char *host, char dns_servers[10][100]) {
    unsigned char buf[65536],*qname,*reader;
    int i , j , stop , s;

    struct sockaddr_in a;

    RES_RECORD answers[20],auth[20],addit[20];
    struct sockaddr_in dest;

    DNS_HEADER *dns = NULL;
    QUESTION *qinfo = NULL;

    s = socket(AF_INET , SOCK_DGRAM , IPPROTO_UDP);

    dest.sin_family = AF_INET;
    dest.sin_port = htons(53);
    dest.sin_addr.s_addr = inet_addr(dns_servers[0]);

    dns = (DNS_HEADER *)&buf;

    dns->id = (unsigned short) htons(getpid());
    dns->qr = 0;
    dns->opcode = 0;
    dns->aa = 0;
    dns->tc = 0;
    dns->rd = 1;
    dns->ra = 0;
    dns->z = 0;
    dns->ad = 0;
    dns->cd = 0;
    dns->rcode = 0;
    dns->q_count = htons(1);
    dns->ans_count = 0;
    dns->auth_count = 0;
    dns->add_count = 0;

    qname =(unsigned char*)&buf[sizeof(DNS_HEADER)];
    ChangetoDnsNameFormat(qname , host);
    qinfo =(QUESTION*)&buf[sizeof(DNS_HEADER) + (strlen((const char*)qname) + 1)];

    qinfo->qtype = htons(1);
    qinfo->qclass = htons(1);

    printf("Sending Packet...");
    if(sendto(s,(char*)buf,sizeof(DNS_HEADER) + (strlen((const char*)qname)+1) + sizeof(QUESTION),0,(struct sockaddr*)&dest,sizeof(dest)) == 0) {
        printf("Error sending socket");
    }
    printf("Sent\n");

    i = sizeof dest;
    printf("Receiving answer...");
    if(recvfrom (s,(char*)buf,65536,0,(struct sockaddr*)&dest,&i) == 0) {
        printf("Failed. Error Code ");
    }
    printf("Received.\n");

    dns = (DNS_HEADER*) buf;

    reader = &buf[sizeof(DNS_HEADER) + (strlen((const char*)qname)+1) + sizeof(QUESTION)];

    printf("The response contains : \n");
    printf(" %d Questions.\n",ntohs(dns->q_count));
    printf(" %d Answers.\n",ntohs(dns->ans_count));
    printf(" %d Authoritative Servers.\n",ntohs(dns->auth_count));
    printf(" %d Additional records.\n\n",ntohs(dns->add_count));

    stop=0;

    for(i=0;i<ntohs(dns->ans_count);i++) {
        answers[i].name=ReadName(reader,buf,&stop);
        reader = reader + stop;

        answers[i].resource = (R_DATA*)(reader);
        reader = reader + sizeof(R_DATA);

        if(ntohs(answers[i].resource->type) == 1) {
            answers[i].rdata = (unsigned char*)malloc(ntohs(answers[i].resource->data_len));

            for(j=0 ; j<ntohs(answers[i].resource->data_len) ; j++) {
                answers[i].rdata[j]=reader[j];
            }

            answers[i].rdata[ntohs(answers[i].resource->data_len)] = '\0';

            reader = reader + ntohs(answers[i].resource->data_len);
        } else {
            answers[i].rdata = ReadName(reader,buf,&stop);
            reader = reader + stop;
        }
    }

    for(i=0;i<ntohs(dns->ans_count);i++) {
        printf("Name : %s ",answers[i].name);

        if(ntohs(answers[i].resource->type)==1) { 
            long *p;
            p=(long*)answers[i].rdata;
            a.sin_addr.s_addr=(*p);
            printf("has IPv4 address : %s",inet_ntoa(a.sin_addr));
        }
        if(ntohs(answers[i].resource->type)==5) {
            printf("has alias name : %s",answers[i].rdata);
        }

        printf("\n");
    }
}

void get_dns_servers(char dns_servers[10][100]) {
    strcpy(dns_servers[0],"8.8.8.8");
    strcpy(dns_servers[1],"8.8.4.4");
}

int main() {
    unsigned char hostname[100];
    char dns_servers[10][100];

    get_dns_servers(dns_servers);

    printf("Enter Hostname to Lookup: ");
    gets((char*)hostname);

    ngethostbyname(hostname, dns_servers);

    return 0;
}
